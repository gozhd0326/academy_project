ExamDto에는 examQuestionIds라는 필드가 있고, 이는 Exam이 참조할 ExamQuestion들의 ID를 가지고 있습니다.
 ExamDto를 Exam Entity로 변환할 때는 이 examQuestionIds를 사용하여 ExamQuestion Entity를 DB에서 조회하고,
 이를 Exam Entity의 examQuestions 필드에 설정하는 작업을 수행합니다.

예를 들어, 다음과 같은 메소드를 사용하여 ExamDto를 Exam Entity로 변환할 수 있습니다

public Exam toEntity(ExamDto dto) {
    Exam exam = new Exam();
    // 기타 필드들 설정...

    List<ExamQuestion> examQuestions = dto.getExamQuestionIds().stream()
        .map(id -> examQuestionRepository.findById(id).orElseThrow(...))
        .collect(Collectors.toList());
    exam.setExamQuestions(examQuestions);

    return exam;
}


위의 코드에서 examQuestionRepository.findById(id).orElseThrow(...)는 id에 해당하는 ExamQuestion Entity를 DB에서 조회하거나, 조회할 수 없다면 예외를 발생시키는 코드입니다.
 이렇게 조회된 ExamQuestion Entity들은 examQuestions 리스트에 모아지고,
 이 리스트는 Exam Entity의 examQuestions 필드에 설정됩니다.
 이렇게 하면 Exam Entity는 ExamDto에 명시된 ExamQuestion들을 참조하게 됩니다.


ExamDto를 Exam Entity로 변환하는 작업은 일반적으로 서비스 레이어에서 이루어집니다. 이 작업을 수행하는 메소드는 서비스 클래스 내부에 작성하거나, 별도의 매퍼 클래스를 만들어 그 안에 작성할 수 있습니다.

예를 들어, 아래와 같이 서비스 클래스 내부에 메소드를 작성할 수 있습니다:

@Service
public class ExamService {

    @Autowired
    private ExamRepository examRepository;
    
    @Autowired
    private ExamQuestionRepository examQuestionRepository;

    public Exam createExam(ExamDto examDto) {
        Exam exam = new Exam();
        // 기타 필드들 설정...

        List<ExamQuestion> examQuestions = examDto.getExamQuestionIds().stream()
            .map(id -> examQuestionRepository.findById(id).orElseThrow(...))
            .collect(Collectors.toList());
        exam.setExamQuestions(examQuestions);

        return examRepository.save(exam); // DB에 저장하고 저장된 Entity를 반환
    }

    // 기타 메소드들...
}


또는, 아래와 같이 별도의 매퍼 클래스를 만들어 그 안에 메소드를 작성할 수 있습니다:

@Component
public class ExamMapper {

    @Autowired
    private ExamQuestionRepository examQuestionRepository;

    public Exam toEntity(ExamDto examDto) {
        Exam exam = new Exam();
        // 기타 필드들 설정...

        List<ExamQuestion> examQuestions = examDto.getExamQuestionIds().stream()
            .map(id -> examQuestionRepository.findById(id).orElseThrow(...))
            .collect(Collectors.toList());
        exam.setExamQuestions(examQuestions);

        return exam;
    }

    // 기타 메소드들...
}


위의 ExamMapper를 사용하려면 아래와 같이 서비스 클래스에서 ExamMapper를 호출하면 됩니다:
@Service
public class ExamService {

    @Autowired
    private ExamRepository examRepository;
    
    @Autowired
    private ExamMapper examMapper;

    public Exam createExam(ExamDto examDto) {
        Exam exam = examMapper.toEntity(examDto);
        return examRepository.save(exam); // DB에 저장하고 저장된 Entity를 반환
    }

    // 기타 메소드들...
}






	// 시험 문제를 생성하거나 수정할 때 사용, 시험 문제의 정답을 설정하거나 조회할 수 있음. (correctAnswer 필드도 포함)
	@OneToMany
	private ExamQuestionDto examQuestionDto;
	
	// 학생들이 시험 문제를 조회하기 위한 데이터 전송 객체
	//학생들은 시험 문제의 내용을 확인할 수 있지만, 정답을 알 수는 없음. (correctAnswer 필드를 제외) 
	@OneToMany
	private ExamQuestionStudentDto examQuestionStudentDto;
	





		// ExamDto를 받아서 실제 Exam Entity를 생성하고 데이터베이스에 저장하는 역할
	@Override
	public ResponseDto<Exam> createExam(ExamDto examDto) {
		
		// ExamDto에서 examQuestionIds를 가져와서 각각의 id에 해당하는 ExamQuestion을 데이터베이스에서 찾음
		Lecture lecture = lectureRepository.findByLectureName(examDto.getLectureName());
		
		Exam exam = new Exam();
		exam.setAuthor(getAuthenticatedUser());
		exam.setCreateAt(LocalDateTime.now());
		exam.setLecture(lecture);
		exam.setTempSaved(false);
		exam.setTitle(examDto.getTitle());
		
		// orElseThrow 메소드는 Optional 객체가 비어있을 때 즉, id에 해당하는 ExamQuestion이 데이터베이스에 없을 때 예외를 발생킴
		List<ExamQuestion> examQuestions = examDto.getExamQuestionIds().stream()
			    .map(id -> examQuestionRepository.findById(id).orElseThrow(() -> new InvalidRequestException("ExamQuestion ID","ExamQuestion with id not found")))
			    .collect(Collectors.toList());
			exam.setExamQuestions(examQuestions);

		        // DB에 저장하고 저장된 Entity를 반환
		        Exam savedExam = examRepository.save(exam);
		        return new ResponseDto<Exam>( HttpStatus.CREATED.name(),savedExam, "Exam created successfully");
	}



// 해당 시험 문제를 참조한다는 의미.
	// 실제 ExamQuestion Entity는 correctAnswer를 포함하고 있음.
	// 그러나 ExamQuestionStudentDto를 사용하여 ExamQuestion Entity를 학생에게 보여줄 때는 correctAnswer를 제외하여 보여줄 수 있음.
	@NotBlank
	private List<Long> examQuestionIds;

